#!/bin/bash

pull-docker-images() {
    while read -r line; do
        docker image pull "$line"
    done <"$HOME/.docker_pulls"

    docker system prune -f
    docker volume prune -f
}

fork-sync() {
    while read -r line; do
        repos=($line)
        upstream_repo=${repos[0]}
        name=$(echo "${upstream_repo}" | pcregrep -o2 "^(.*)\/(.*)")
        fork_repo="${GITHUB_USERNAME}/${name}"
        length="${#repos[@]}"
        
        if [ $length -gt 1 ]; then
            fork_repo=${repos[1]}
        fi

        directory="${GITHUB_PATH}/${fork_repo}"

        if [ ! -d "$directory" ]; then
            (
            cd "${GITHUB_PATH}/${GITHUB_USERNAME}"
            echo "Cloning repo ${fork_repo}..."
            git clone "${fork_repo}"
            )
        fi
        (
        cd "${directory}"
        
        if [ ! $(git config remote.upstream.url) ]; then
            git remote add upstream "${upstream_repo}"
        fi

        curr_branch=$(git rev-parse --abbrev-ref HEAD)
        echo "Syncing ${curr_branch} in ${fork_repo}..."
        git sync
        
        changed=$(git log origin/${curr_branch}..${curr_branch})

        if [ -n "${changed}" ]; then
            echo "Pushing changes to origin..."
            git push
        else
            echo "No changes"
        fi

        unset changed
        unset curr_branch
        unset repos
        unset upstream_repo
        unset fork_repo
        unset directory
        ) 
    done <"${HOME}/.github_forks"
}

build-dockerfiles() {
    (
    cd "${GITHUB_PATH}/${GITHUB_USERNAME}/dockerfiles"
    git submodule update --recursive --remote
    time docker image build --no-cache -t "${GITHUB_USERNAME}/whois" whois
    time docker image build --no-cache -t "${GITHUB_USERNAME}/nmap:alpine" -t "${GITHUB_USERNAME}/nmap" nmap
    time docker image build --no-cache -t "${GITHUB_USERNAME}/subfinder" subfinder
    time docker image build --no-cache -t "${GITHUB_USERNAME}/vscode:insiders" vscode/insiders
    time docker image build --no-cache -t "${GITHUB_USERNAME}/mitmproxy:alpine" -t "${GITHUB_USERNAME}/mitmproxy" mitmproxy
    time docker image build --no-cache -t "${GITHUB_USERNAME}/vlc:alpine" -t "${GITHUB_USERNAME}/vlc" vlc
    time docker image build --no-cache -t "${GITHUB_USERNAME}/slack" slack
    time docker image build --no-cache -t "${GITHUB_USERNAME}/pv" pv
    time docker image build --no-cache -t "${GITHUB_USERNAME}/jq" jq
    time docker image build --no-cache -t "${GITHUB_USERNAME}/figlet" figlet
    time docker image build --no-cache -t "${GITHUB_USERNAME}/shellcheck:alpine" -t "${GITHUB_USERNAME}/shellcheck" shellcheck
    time docker image build --no-cache -t "${GITHUB_USERNAME}/rq" rq
    time docker image build --no-cache -t "${GITHUB_USERNAME}/bind-tools" bind-tools
    time docker image build --no-cache -t "${GITHUB_USERNAME}/iputils" iputils
    time docker image build --no-cache -t "${GITHUB_USERNAME}/htop" htop
    )
}

push-dockerfiles() {
    docker image push "${GITHUB_USERNAME}/whois"
    docker image push "${GITHUB_USERNAME}/nmap"
    docker image push "${GITHUB_USERNAME}/nmap:alpine"
    docker image push "${GITHUB_USERNAME}/subfinder"
    docker image push "${GITHUB_USERNAME}/vscode:insiders"
    docker image push "${GITHUB_USERNAME}/mitmproxy:alpine"
    docker image push "${GITHUB_USERNAME}/mitmproxy"
    docker image push "${GITHUB_USERNAME}/vlc:alpine"
    docker image push "${GITHUB_USERNAME}/vlc"
    docker image push "${GITHUB_USERNAME}/slack"
    docker image push "${GITHUB_USERNAME}/pv"
    docker image push "${GITHUB_USERNAME}/jq"
    docker image push "${GITHUB_USERNAME}/figlet"
    docker image push "${GITHUB_USERNAME}/shellcheck:alpine"
    docker image push "${GITHUB_USERNAME}/shellcheck"
    docker image push "${GITHUB_USERNAME}/rq"
    docker image push "${GITHUB_USERNAME}/bind-tools" 
    docker image push "${GITHUB_USERNAME}/iputils"
    docker image push "${GITHUB_USERNAME}/htop"

    docker system prune -f
    docker volume prune -f
}

ga-wifi-accept() {
    http -F --all --form POST https://www.ombord.info/hotspot/hotspot.cgi method=login username="" password="" url="http%3A%2F%2Fstanstedexpress.on.icomera.com%2F" onerror="http%3A%2F%2Fstanstedexpress.on.icomera.com%2Ferror.html"
}
