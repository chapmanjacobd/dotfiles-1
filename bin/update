#!/bin/bash
set -e

help() {
	echo "update some stuff"
}

# Choose a user account to use
get_user() {
	if [ -z "${TARGET_USER-}" ]; then
		mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
		# if there is only one option just use that user
		if [ "${#options[@]}" -eq "1" ]; then
			readonly TARGET_USER="${options[0]}"
			echo "Using user account: ${TARGET_USER}"
			return
		fi

		# iterate through the user options and print them
		PS3='Which user account should be used? '

		select opt in "${options[@]}"; do
			readonly TARGET_USER=$opt
			break
		done
	fi
}

dcleanup(){
	local containers
	mapfile -t containers < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
	local user_home="/home/${TARGET_USER}"
	local docker_dir="${GO_PATH}/src/github.com/docker/docker-ce"

	# stop docker
	dcleanup || true
	rc-service docker stop || true

	# Include contributed completions
	mkdir -p /etc/bash_completion.d
	curl -sSL -o /etc/bash_completion.d/docker https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker

	if [[ -d "${docker_dir}" ]]; then
		(
		cd "${docker_dir}"

		# Clean up bundles
		rm -rf bundles

		# move vim syntax highlighting
		if [[ ! -d "${user_home}/.local/share/nvim/plugged/Dockerfile" ]]; then
			mkdir -p "${user_home}/.local/share/nvim/plugged/Dockerfile"
		fi
		# shellcheck disable=SC2216
		yes | cp -r contrib/syntax/vim/* "${user_home}/.local/share/nvim/plugged/Dockerfile/"
		chown -R "${TARGET_USER}" "${user_home}/.local/share/nvim/plugged/Dockerfile"
		)
	fi

	# get the binary
	local tmp_tar=/tmp/docker.tgz
	local binary_uri="https://download.docker.com/linux/static/nightly/x86_64"
	local docker_version
	#docker_version=$(curl -sSL "https://api.github.com/repos/docker/docker-ce/releases/latest" | jq --raw-output .tag_name)
    docker_version=$(curl -sSL "https://download.docker.com/linux/static/nightly/x86_64/" | pcregrep -o1 "^\<a href=\"(docker-0.0.0-.*.tgz)\"\>" | sort | tail -n 1
)
	# local docker_sha256
	# docker_sha256=$(curl -sSL "${binary_uri}/docker-${docker_version}.tgz.sha256" | awk '{print $1}')
	(
	set -x
	curl -fSL "${binary_uri}/${docker_version}" -o "$tmp_tar"
	# echo "${docker_sha256} ${tmp_tar}" | sha256sum -c -
	tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
	rm "${tmp_tar}"
	# remove binaries we don't need
	#rm /usr/local/bin/docker-containerd*
	docker -v
	)
	chmod +x /usr/local/bin/docker*

	# enable and start docker
	# rc-update add docker default
	rc-service docker start
}

update_containerd() {
	rc-service containerd stop || true
    
    local tmp_tar=/tmp/containerd.tar.gz
	local containerd_version
	containerd_version=$(curl -sSL "https://api.github.com/repos/containerd/containerd/releases" | jq --raw-output .[0].tag_name)
	containerd_version=${containerd_version#v}
	local binary_uri="https://github.com/containerd/containerd/releases/download/v${containerd_version}/containerd-${containerd_version}.linux-amd64.tar.gz"
	(
	set -x
	curl -fSL "$binary_uri" -o "$tmp_tar"
	tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
	rm "$tmp_tar"
	containerd -v
	)

	# enable and start containerd
	#rc-update add containerd default
	rc-service containerd start
}

update_runc() {
	local runc_version
	runc_version=$(curl -sSL "https://api.github.com/repos/opencontainers/runc/releases" | jq --raw-output .[0].tag_name)
	runc_version=${runc_version#v}
	local binary_uri="https://github.com/opencontainers/runc/releases/download/v${runc_version}/runc.amd64"
	(
	set -x
	curl -fSL "$binary_uri" -o "/sbin/runc"
	chmod +x /sbin/runc
	runc -v
	)
}

update_k8s() {
	echo "Updating kubectl..."
    KUBERNETES_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)
	curl -fSL "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl
	chmod +x /usr/local/bin/kubectl
	echo "kubectl $(kubectl version --client --short)"

    echo "Updating minikube..."
    curl -fSL "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64" > /usr/local/bin/minikube
    chmod +x /usr/local/bin/minikube
    minikube version
}

update_faas() {
    echo "Updating OpenFaaS CLI..."
    curl -fSL https://cli.openfaas.com | sudo sh
}

update_img() {
    echo "Updating Genuine Tools img..."
    LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/genuinetools/img/releases/latest)
    LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    echo "Installing img version ${LATEST_VERSION}..."
    sudo curl -L https://github.com/genuinetools/img/releases/download/${LATEST_VERSION}/img-linux-amd64 -o /usr/local/bin/img
    # Verify the sha256sum
    export SHASUM=$(curl -L https://github.com/genuinetools/img/releases/download/${LATEST_VERSION}/img-linux-amd64.sha256 | awk '{ print $1 }')
    if [ "$SHASUM" != "$(shasum -a 256 /usr/local/bin/img | awk '{ print $1 }')" ]; then echo "sha256sum mismatch!"; fi
    sudo chmod a+x /usr/local/bin/img
    echo "img installed!"
}

update_reg() {
    echo "Updating Genuine Tools reg..."
    LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/genuinetools/reg/releases/latest)
    LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    echo "Installing reg version ${LATEST_VERSION}..."
    sudo curl -L https://github.com/genuinetools/reg/releases/download/${LATEST_VERSION}/reg-linux-amd64 -o /usr/local/bin/reg
    # Verify the sha256sum
    export SHASUM=$(curl -L https://github.com/genuinetools/reg/releases/download/${LATEST_VERSION}/reg-linux-amd64.sha256 | awk '{ print $1 }')
    if [ "$SHASUM" != "$(shasum -a 256 /usr/local/bin/reg | awk '{ print $1 }')" ]; then echo "sha256sum mismatch!"; fi
    sudo chmod a+x /usr/local/bin/reg
}

update_rust() {
    rustup update
	rustc --version
}

update() {
	echo "running the update functions"

	# detect the OS for the update functions
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Hey there Linux user. You rule."

		# on linux, make sure they are the super user
		if [ "$UID" -ne 0 ]; then
			echo "Please run as root"
			exit 1
		fi

		# update
		#update_runc;
		#update_containerd;
		update_docker;
		update_k8s;
        update_img;
        update_faas;
		update_rust;
	else
		echo "We don't have update functions for OS: ${OSTYPE}"
		echo "Moving on..."
	fi

	echo "updates complete"
}

main() {
	local arg=$1
	if [[ ! -z "$arg" ]]; then
		help
	else
		update
	fi
}

main "$@"
